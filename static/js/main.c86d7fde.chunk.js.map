{"version":3,"sources":["components/search-box/search-box.component.jsx","components/card/Card.js","components/card-list/card-list.js","App.js","reportWebVitals.js","index.js"],"names":["SearchBox","placeholder","handleChange","className","type","onChange","Card","props","alt","src","monster","id","name","email","CardList","monsters","map","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAIaA,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBACIC,UAAU,SACVC,KAAM,SACNH,YAAcA,EACdI,SAAUH,KCNLI,G,MAAO,SAAAC,GAAK,OACrB,sBAAKJ,UAAU,iBAAf,UACI,qBAAKK,IAAI,WAAWC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,4BACvB,mCAAMJ,EAAMG,QAAQE,KAApB,OACA,4BAAIL,EAAMG,QAAQG,aCHbC,G,MAAW,SAAAP,GAAK,OAC7B,qBAAKJ,UAAU,YAAf,SACKI,EAAMQ,SAASC,KAAI,SAAAN,GAAO,OAC3B,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WC8CRM,G,wDA/Cb,aAAe,IAAD,8BACZ,gBAcFf,aAAe,SAACgB,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAbtC,EAAKC,MAAQ,CACXR,SAAU,GACVK,YAAY,IALF,E,qDASd,WAAqB,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACJ,SAASa,S,oBAQzC,WACE,MAAkCC,KAAKN,MAA/BR,EAAR,EAAQA,SAAUK,EAAlB,EAAkBA,YACZU,EAAmBf,EAASgB,QAAO,SAAArB,GAAO,OAC9CA,EAAQE,KAAKoB,cAAcC,SAASb,EAAYY,kBAGlD,OACE,sBAAK7B,UAAU,MAAf,UACE,qDAEA,cAAC,EAAD,CACEF,YAAY,kBACZC,aAAc2B,KAAK3B,eAIrB,cAAC,EAAD,CAAUa,SAAUe,W,GArCVI,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c86d7fde.chunk.js","sourcesContent":["import React from 'react';\n\nimport './search-box.styles.css';\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n    <input\n        className='search'\n        type= 'search'\n        placeholder= {placeholder}\n        onChange={handleChange}\n    />\n);","import React from \"react\";\nimport './Card.styles.css'\n\nexport const Card = props => (\n    <div className='card-container'>\n        <img alt=\"monsters\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\n        <h2> {props.monster.name} </h2>\n        <p>{props.monster.email}</p>\n    </div>\n)","import React from 'react';\nimport { Card } from '../card/Card';\nimport './card-list.styles.css';\n\nexport const CardList = props => (    \n<div className=\"card-list\">\n    {props.monsters.map(monster => (\n    <Card key={monster.id} monster={monster} />\n    ))}\n</div>\n);","import React, { Component } from 'react';\nimport { SearchBox } from './components/search-box/search-box.component'\nimport { CardList } from './components/card-list/card-list';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField:''\n    };    \n\n  }\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters:users}));\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value })\n  }\n\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())      \n      )\n\n    return (\n      <div className=\"App\">\n        <h1>Rolodex of Munsters</h1>\n\n        <SearchBox\n          placeholder='search monsters'\n          handleChange={this.handleChange}\n\n        />\n\n        <CardList monsters={filteredMonsters}>\n        \n        </CardList>\n      </div>\n    );\n\n  }\n}\n  \n \n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}